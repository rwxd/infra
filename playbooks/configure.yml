---
- name: Configure systems
  hosts: all
  tasks:
    - name: Include basic-config role
      include_role:
        name: basic-config

    - name: Include users role
      include_role:
        name: users

    - name: Include ssh-hardening role
      include_role:
        name: ssh-hardening

    - name: Include firewalld role
      include_role:
        name: firewalld
      when: firewalld is defined and firewalld

    - name: Include unattended-upgrades role
      include_role:
        name: unattended-upgrades
        apply:
          become: true
      when: ansible_distribution in ["Debian", "Ubuntu"]

    - name: Include update system role
      include_role:
        name: update

- name: Configure docker
  hosts: all
  tasks:
    - name: Get architecture
      ansible.builtin.shell:
        cmd: dpkg --print-architecture
      register: architecture
      when: docker is defined and docker

    - name: Include docker role
      include_role:
        name: geerlingguy.docker
        apply:
          become: true
      when: docker is defined and docker
      vars:
        docker_apt_arch: "{{ architecture.stdout }}"

    - name: Install pip with docker package
      include_role:
        name: geerlingguy.pip
        apply:
          become: true
      when: docker is defined and docker
      vars:
        pip_install_packages:
          - name: docker

    - name: Install ipv6nat
      include_role:
        name: docker-ipv6nat
      when: docker_ipv6nat is defined and docker_ipv6nat

- name: Cloudflare dyndns
  hosts: cloud
  tasks:
    - name: Include docker-cloudflare-ddns role
      include_role:
        name: docker-cloudflare-ddns

- name: InfluxDB
  hosts: all
  tasks:
    - name: Include docker-influxdb role
      include_role:
        name: docker-influxdb
      when: inventory_hostname in ["ap01"]

- name: Wireguard
  hosts: cloud
  tasks:
    - name: Create local configuration directory
      ansible.builtin.file:
        path: "../configs/wireguard/{{ inventory_hostname }}"
        state: directory
      delegate_to: localhost

    - name: Include docker-wireguard role
      include_role:
        name: docker-wireguard

    - name: Get current user
      ansible.builtin.shell:
        cmd: whoami
      register: whoami

    - name: Set copy facts
      ansible.builtin.set_fact:
        whoami: "{{ whoami.stdout }}"
        temp_path: "/home/{{ whoami.stdout }}/wireguard_configs"

    - name: Copy wireguard configs to user dir
      ansible.builtin.copy:
        src: "{{ wireguard_container_configs_dir }}"
        dest: "{{ temp_path }}"
        remote_src: true
        owner: "{{ whoami }}"
        group: "{{ whoami }}"
      become: true

    - name: Fetch wireguard configs
      ansible.builtin.synchronize:
        src: "{{ temp_path }}"
        dest: "../configs/{{ inventory_hostname }}/"
        mode: pull

    - name: Delete temp path
      ansible.builtin.file:
        path: "{{ temp_path }}"
        state: absent

- name: Configure longhorn
  hosts: k3s-node*
  tasks:
    - name: Include longhorn role
      include_role:
        name: longhorn

- name: Build k3s cluster
  hosts: k3s-control01, k3s-node01, k3s-node02
  vars:
    k3s_build_cluster: true
    k3s_become: true
    k3s_state: installed
    k3s_server:
      disable:
        - traefik
  tasks:
    - name: Install required packages
      ansible.builtin.apt:
        name: linux-modules-extra-raspi
        state: present
      register: installation
      become: true

    - name: Reboot
      ansible.builtin.reboot:
        reboot_timeout: 600
      when: installation.changed
      become: true

    - name: Include k3s role
      include_role:
        name: ansible-role-k3s

    - name: Create kubeconfig directory
      ansible.builtin.file:
        path: ../kubeconfigs
        state: directory
      delegate_to: localhost

    - name: Get kubeconfig from master
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "../kubeconfigs/{{ inventory_hostname }}"
        flat: true
      become: true
      when: k3s_control_node is defined and k3s_control_node
