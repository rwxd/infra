---
- name: Configure systems
  hosts: all
  tasks:
    - name: Include basic-config role
      ansible.builtin.include_role:
        name: basic-config
        apply:
          tags: config
      tags: config

    - name: Include users role
      ansible.builtin.include_role:
        name: users
        apply:
          tags: config
      tags: config

    - name: Include ssh-hardening role
      ansible.builtin.include_role:
        name: ssh-hardening
        apply:
          tags:
            - config
            - security
      tags:
        - config
        - security

    - name: Include security role
      ansible.builtin.include_role:
        name: geerlingguy.security
        apply:
          tags:
            - config
            - security
          become: true
      tags:
        - config
        - security

    - name: Include firewalld role
      ansible.builtin.include_role:
        name: firewalld
        apply:
          tags: config
      tags: config
      when: firewalld is defined and firewalld

    - name: Include ansible-disk role
      ansible.builtin.include_role:
        name: ansible-disk
        apply:
          become: true
          tags: config
      tags: config
      when: disk_additional_disks is defined

    - name: Include update system role
      ansible.builtin.include_role:
        name: update
        apply:
          tags: config
      tags: config

    - name: Get architecture
      ansible.builtin.command:
        cmd: dpkg --print-architecture
      register: architecture
      when: docker is defined and docker
      tags: docker

    - name: Include docker role
      ansible.builtin.include_role:
        name: geerlingguy.docker
        apply:
          become: true
          tags: docker
      when: docker is defined and docker
      vars:
        docker_apt_arch: "{{ architecture.stdout }}"
      tags: docker

    - name: Install pip with docker package
      ansible.builtin.include_role:
        name: geerlingguy.pip
        apply:
          become: true
          tags: docker
      vars:
        pip_install_packages:
          - name: docker
      when: docker is defined and docker
      tags: docker

    - name: Install ipv6nat
      ansible.builtin.include_role:
        name: docker-ipv6nat
        apply:
          tags: docker
      when: docker_ipv6nat is defined and docker_ipv6nat
      tags: docker

    - name: Include podman role
      ansible.builtin.include_role:
        name: podman
        apply:
          tags: podman
      when: podman is defined and podman
      tags: podman

    - name: Include caddy role
      ansible.builtin.include_role:
        name: caddy-ansible
        apply:
          tags: caddy
          become: true
      when: caddy is defined and caddy
      tags: caddy

    - name: Include traefik role
      ansible.builtin.include_role:
        name: docker-traefik
        apply:
          tags: traefik
      when: traefik_container is defined and traefik_container
      tags: traefik

    - name: Include docker-cloudflare-ddns role
      ansible.builtin.include_role:
        name: docker-cloudflare-ddns
        apply:
          tags: cloudflare_ddns
      when: cloudflare_ddns_container is defined and cloudflare_ddns_container
      tags: cloudflare_ddns

    - name: Include monitoring-stack role
      ansible.builtin.include_role:
        name: docker-monitoring-stack
        apply:
          tags: monitoring_stack
      when: monitoring_stack is defined and monitoring_stack
      tags: monitoring_stack

    - name: Include actualbudget role
      ansible.builtin.include_role:
        name: docker-actualbudget
        apply:
          tags: actualbudget
      when: actualbudget_container is defined and actualbudget_container
      tags: actualbudget

    - name: Include transmission-openvpn role
      ansible.builtin.include_role:
        name: docker-transmission-openvpn
        apply:
          tags: transmission
      when: transmission_openvpn_container is defined and transmission_openvpn_container
      tags: transmission

    - name: Include docker-miniflux role
      ansible.builtin.include_role:
        name: docker-miniflux
        apply:
          tags: miniflux
      when: miniflux_container is defined and miniflux_container
      tags: miniflux

    - name: Include docker-uptime_kuma role
      ansible.builtin.include_role:
        name: docker-uptime_kuma
        apply:
          tags: uptime_kuma
      when: uptime_kuma_container is defined and uptime_kuma_container
      tags: uptime_kuma

    - name: Include docker-wallabag role
      ansible.builtin.include_role:
        name: docker-wallabag
        apply:
          tags: wallabag
      when: wallabag_container is defined and wallabag_container
      tags: wallabag

    - name: Wireguard
      when: wireguard_container is defined and wireguard_container
      block:
        - name: Get current local user
          ansible.builtin.command:
            cmd: whoami
          changed_when: false
          register: whoami
          delegate_to: localhost
          tags: wireguard

        - name: Create local configuration directory
          ansible.builtin.file:
            path: "../configs/wireguard/{{ inventory_hostname }}"
            mode: 0700
            owner: "{{ whoami.stdout }}"
            group: "{{ whoami.stdout }}"
            state: directory
            recurse: true
          delegate_to: localhost
          tags: wireguard

        - name: Include docker-wireguard role
          ansible.builtin.include_role:
            name: docker-wireguard
            apply:
              tags: wireguard
          tags: wireguard

        - name: Get current user
          ansible.builtin.command:
            cmd: whoami
          changed_when: false
          register: whoami
          tags: wireguard

        - name: Set copy facts
          ansible.builtin.set_fact:
            temp_path: "/home/{{ whoami.stdout }}/wireguard_configs"
          tags: wireguard

        - name: Copy wireguard configs to user dir
          ansible.builtin.copy:
            src: "{{ wireguard_container_configs_dir }}"
            dest: "{{ temp_path }}"
            remote_src: true
            mode: 0700
            owner: "{{ whoami.stdout }}"
            group: "{{ whoami.stdout }}"
          become: true
          tags: wireguard

        - name: Fetch wireguard configs
          ansible.builtin.synchronize:
            src: "{{ temp_path }}"
            dest: "../configs/wireguard/{{ inventory_hostname }}/*"
            mode: pull
          tags: wireguard

        - name: Delete temp path
          ansible.builtin.file:
            path: "{{ temp_path }}"
            state: absent
          tags: wireguard

# - name: Configure longhorn
#   hosts: k3s-node*
#   tasks:
#     - name: Include longhorn role
#       ansible.builtin.include_role:
#         name: longhorn

# - name: Build k3s cluster
#   hosts: k3s-control01, k3s-node01, k3s-node02
#   vars:
#     k3s_build_cluster: true
#     k3s_become: true
#     k3s_state: installed
#     k3s_server:
#       disable:
#         - traefik
#   tasks:
#     - name: Install required packages
#       ansible.builtin.apt:
#         name: linux-modules-extra-raspi
#         state: present
#       register: installation
#       become: true
#
#     - name: Reboot
#       ansible.builtin.reboot:
#         reboot_timeout: 600
#       when: installation.changed
#       become: true
#
#     - name: Include k3s role
#       ansible.builtin.include_role:
#         name: ansible-role-k3s
#
#     - name: Create kubeconfig directory
#       ansible.builtin.file:
#         path: ../kubeconfigs
#         mode: 0640
#         state: directory
#       delegate_to: localhost
#
#     - name: Get kubeconfig from master
#       ansible.builtin.fetch:
#         src: /etc/rancher/k3s/k3s.yaml
#         dest: "../kubeconfigs/{{ inventory_hostname }}"
#         flat: true
#       become: true
#       when: k3s_control_node is defined and k3s_control_node
